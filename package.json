{
  "private": true,
  "name": "ecl",
  "version": "2.13.1",
  "publisher": "hpcc-systems",
  "displayName": "ECL Language",
  "description": "ECL (Enterprise Control Language) support for Visual Studio Code",
  "icon": "resources/eclIcon.png",
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Debuggers"
  ],
  "main": "./dist/extension.js",
  "scripts": {
    "clean": "rimraf out lib* dist types *.vsix",
    "copy-resources": "copyfiles -f ./node_modules/@hpcc-js/ddl-shim/schema/v2.json ./dist",
    "gen-grammar": "wsl -e ./scripts/grammar-generate.sh",
    "gen-nls": "node ./lib-util/index.js",
    "compile": "tsc",
    "compile-watch": "npm run compile -- -watch",
    "compile-es6": "tsc --module es6 --outDir ./lib-es6",
    "compile-es6-watch": "npm run compile-es6 -- -w",
    "compile-util": "tsc --project ./tsconfig.util.json",
    "compile-util-watch": "npm run compile-util -- -w",
    "bundle": "webpack --mode=\"production\"",
    "bundle-watch": "webpack --mode=\"development\" --watch",
    "build": "run-s copy-resources compile-es6 bundle",
    "watch": "npm-run-all compile-es6 --parallel compile-es6-watch bundle-watch",
    "lint": "eslint src/**/*.ts",
    "lint-fix": "npm run lint -- --fix",
    "test": "npm run compile",
    "dev-link": "rimraf ./node_modules/@hpcc-js && mklink /J .\\node_modules\\@hpcc-js ..\\hpcc-js\\packages",
    "dev-unlink": "rimraf ./node_modules/@hpcc-js",
    "standard-version": "standard-version",
    "vscode:prepublish": "run-s clean build",
    "git-push": "git push --follow-tags upstream trunk",
    "preinstall": "npm run dev-unlink || echo \"Clean Install - ignore previous error!\"",
    "vsce-publish": "vsce publish",
    "vsce-package": "vsce package -o ./hpcc-systems.ecl.vsix",
    "tag": "run-s standard-version git-push"
  },
  "devDependencies": {
    "@fluentui/react": "^7.170.1",
    "@hpcc-js/common": "^2.48.0",
    "@hpcc-js/comms": "^2.42.0",
    "@hpcc-js/dgrid": "^2.9.0",
    "@hpcc-js/loader": "^2.66.0",
    "@hpcc-js/marshaller": "^2.23.75",
    "@hpcc-js/observable-md": "^2.29.0",
    "@hpcc-js/util": "^2.29.0",
    "@material-ui/core": "^4.11.4",
    "@types/mocha": "^7.0.2",
    "@types/node": "^12.20.13",
    "@types/react-dom": "^16.9.13",
    "@types/vscode": "~1.50.0",
    "@typescript-eslint/eslint-plugin": "^3.2.0",
    "@typescript-eslint/parser": "^3.2.0",
    "adm-zip": "^0.4.16",
    "antlr4": "~4.9.2",
    "copy-to-clipboard": "^3.3.1",
    "copyfiles": "^2.4.1",
    "css-loader": "^4.3.0",
    "diff": "^4.0.2",
    "eslint": "^7.27.0",
    "mocha": "^7.2.0",
    "npm-run-all": "^4.1.5",
    "original-fs": "^1.1.0",
    "react": "^16.14.0",
    "react-dom": "^16.14.0",
    "rimraf": "^3.0.2",
    "source-map-loader": "^2.0.2",
    "standard-version": "^9.3.0",
    "style-loader": "^1.3.0",
    "tslib": "^2.2.0",
    "typescript": "^4.2.4",
    "use-resize-observer": "^6.1.0",
    "vsce": "^1.88.0",
    "vscode-debugadapter": "^1.47.0",
    "vscode-debugprotocol": "^1.47.0",
    "webpack": "^5.37.1",
    "webpack-cli": "^4.7.0"
  },
  "author": {
    "name": "HPCC SystemsÂ®"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hpcc-systems/vscode-ecl.git"
  },
  "engines": {
    "vscode": "^1.50.0"
  },
  "galleryBanner": {
    "color": "#CFB69A",
    "theme": "light"
  },
  "enableProposedApi": false,
  "extensionDependencies": [
    "vscode.json"
  ],
  "activationEvents": [
    "onLanguage:ecl",
    "onLanguage:kel",
    "onLanguage:omd"
  ],
  "contributes": {
    "languages": [
      {
        "id": "ecl",
        "extensions": [
          "ecl",
          "mod",
          "ecllib"
        ],
        "aliases": [
          "ECL",
          "ecl"
        ],
        "configuration": "./ecl-tmLanguage/ecl.configuration.json"
      },
      {
        "id": "kel",
        "extensions": [
          "kel"
        ],
        "aliases": [
          "KEL",
          "kel"
        ],
        "configuration": "./kel.configuration.json"
      },
      {
        "id": "omd",
        "extensions": [
          "omd"
        ],
        "aliases": [
          "Observable Markdown"
        ]
      },
      {
        "id": "json",
        "extensions": [
          "dashy"
        ],
        "aliases": [
          "Dashy"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "*.dashy",
        "url": "./dist/v2.json"
      }
    ],
    "grammars": [
      {
        "language": "ecl",
        "scopeName": "source.ecl",
        "path": "./ecl-tmLanguage/syntaxes/ecl.tmLanguage.json"
      },
      {
        "language": "kel",
        "scopeName": "source.kel",
        "path": "./syntaxes/kel.tmLanguage.json"
      },
      {
        "language": "omd",
        "scopeName": "text.html.markdown",
        "path": "./syntaxes/omd.tmLanguage"
      }
    ],
    "snippets": [
      {
        "language": "ecl",
        "path": "./snippets/ecl.json"
      },
      {
        "language": "kel",
        "path": "./snippets/kel.json"
      }
    ],
    "viewsWelcome": [],
    "commands": [
      {
        "command": "ecl.submit",
        "category": "ECL",
        "title": "%Submit%",
        "description": "%Submit ECL to HPCC Platform%",
        "icon": {
          "light": "resources/light/play.svg",
          "dark": "resources/dark/play.svg"
        }
      },
      {
        "command": "ecl.compile",
        "category": "ECL",
        "title": "%Compile%",
        "description": "%Compile ECL on the HPCC Platform%",
        "icon": {
          "light": "resources/light/file-binary.svg",
          "dark": "resources/dark/file-binary.svg"
        }
      },
      {
        "command": "ecl.checkSyntax",
        "category": "ECL",
        "title": "%Syntax Check%",
        "description": "%Save + check syntax of current file%"
      },
      {
        "command": "ecl.checkSyntaxAll",
        "category": "ECL",
        "title": "%Syntax Check all files%",
        "description": "%Save All + check syntax of all files%"
      },
      {
        "command": "ecl.checkSyntaxClear",
        "category": "ECL",
        "title": "%Syntax Clear%",
        "description": "%Clear all previously reported ECL Syntax Check results%"
      },
      {
        "command": "ecl.sign",
        "category": "ECL",
        "title": "%Sign ECL%",
        "description": "%Digitally sign ECL file%"
      },
      {
        "command": "ecl.verify",
        "category": "ECL",
        "title": "%Verify ECL Signature%",
        "description": "%Verify ECL Digital Signature%"
      },
      {
        "command": "ecl.importModFile",
        "category": "ECL",
        "title": "%Import '.mod' file%",
        "description": "%Import ECL '.mod' file%"
      },
      {
        "command": "ecl.showLanguageReference",
        "category": "ECL",
        "title": "%Language Reference Website%",
        "description": "%Opens the ECL language reference website in external browser%"
      },
      {
        "command": "ecl.searchTerm",
        "category": "ECL",
        "title": "%Language Reference Lookup%",
        "description": "%For the currently selected text, search the online ECL language reference%"
      },
      {
        "command": "ecl.showWUDetails",
        "category": "ECL",
        "title": "%Open ECL Watch%",
        "description": "%Opens ECL Watch Page%"
      },
      {
        "command": "ecl.openECLWatchExternal",
        "category": "ECL",
        "title": "%Launch ECL Watch%",
        "description": "%Opens ECL Watch Page in an external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "ecl.selectCTVersion",
        "category": "ECL",
        "title": "%Select Client Tools Version%",
        "description": "%Select Client Tools Version from available options%"
      },
      {
        "command": "ecl.createTerminal",
        "category": "ECL",
        "title": "%Terminal%",
        "description": "%Opens ECL Client Tools Terminal Session%"
      },
      {
        "command": "ecl.insertRecordDef",
        "category": "ECL",
        "title": "%Insert Record Definition%",
        "description": "%Insert logical file record definition%"
      },
      {
        "command": "ecl.copyAsEclID",
        "category": "ECL",
        "title": "%Copy as ECL ID%",
        "description": "%Copy path as Qualified ECL ID%"
      },
      {
        "command": "hpccPlatform.abortWU",
        "category": "ECL",
        "title": "%Abort Workunit%",
        "enablement": "viewItem == ECLWUNode"
      },
      {
        "command": "hpccPlatform.deleteWU",
        "category": "ECL",
        "title": "%Delete Workunit%",
        "enablement": "viewItem == ECLWUNodeComplete"
      },
      {
        "command": "hpccPlatform.refresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "hpccPlatform.eclwatch",
        "category": "ECL",
        "title": "%ECL Watch%",
        "description": "%Open ECL Watch in external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "hpccPlatform.pin",
        "category": "ECL",
        "title": "%Pin launch configuration%",
        "description": "%Pin launch configuration to current document%"
      },
      {
        "command": "hpccPlatform.switch",
        "category": "ECL",
        "title": "%Switch HPCC Platform%",
        "description": "%Switch to different HPCC Platform instance%",
        "icon": {
          "light": "resources/light/server-process.svg",
          "dark": "resources/dark/server-process.svg"
        }
      },
      {
        "command": "hpccPlatform.switchTargetCluster",
        "category": "ECL",
        "title": "%Switch Target Cluster%",
        "description": "%Switch Target Cluster%"
      },
      {
        "command": "hpccPlatform.myWorkunits",
        "category": "ECL",
        "title": "%My workunits%",
        "description": "%Showing \"my\" workunits%",
        "icon": {
          "light": "resources/light/person.svg",
          "dark": "resources/dark/person.svg"
        }
      },
      {
        "command": "hpccPlatform.allWorkunits",
        "category": "ECL",
        "title": "%All workunits%",
        "description": "%Showing all workunits%",
        "icon": {
          "light": "resources/light/organization.svg",
          "dark": "resources/dark/organization.svg"
        }
      },
      {
        "command": "hpccResources.bundles.refresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "hpccResources.bundles.homepage",
        "category": "ECL",
        "title": "%Homepage%",
        "description": "%Bundles Homepage%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "hpccResources.bundles.install",
        "category": "ECL",
        "title": "%Install%",
        "description": "%Install Bundle%",
        "icon": {
          "light": "resources/light/cloud-download.svg",
          "dark": "resources/dark/cloud-download.svg"
        }
      },
      {
        "command": "hpccResources.bundles.uninstall",
        "category": "ECL",
        "title": "%Uninstall%",
        "description": "%Uninstall Bundle%",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.homepage",
        "category": "ECL",
        "title": "%Homepage%",
        "description": "%Client Tools Homepage%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.refresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.activate",
        "category": "ECL",
        "title": "%Activate%",
        "description": "%Activate Client Tools%",
        "icon": {
          "light": "resources/light/pass.svg",
          "dark": "resources/dark/pass.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.deactivate",
        "category": "ECL",
        "title": "%Auto Detect%",
        "description": "%Auto Detect Client Tools%",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.terminal",
        "category": "ECL",
        "title": "%Terminal%",
        "description": "%ECL Client Tools Terminal%",
        "icon": {
          "light": "resources/light/terminal.svg",
          "dark": "resources/dark/terminal.svg"
        }
      },
      {
        "command": "ecl.watch.lite.openECLWatchExternal",
        "category": "ECL",
        "title": "%ECL Watch%",
        "description": "%Open ECL Watch in external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "kel.checkSyntax",
        "category": "KEL",
        "title": "%Syntax Check%",
        "description": "%Save + check syntax of current file%"
      },
      {
        "command": "kel.generate",
        "category": "KEL",
        "title": "%Generate%",
        "description": "%Generate source from KEL file%"
      },
      {
        "command": "kel.reveal",
        "category": "KEL",
        "title": "%Reveal Generated ECL in File Explorer%",
        "description": "%Reveals Generated ECL in File Explorer%"
      },
      {
        "command": "kel.selectCTVersion",
        "category": "KEL",
        "title": "%Select Client Tools Version%",
        "description": "%Select Client Tools Version from available options%"
      },
      {
        "command": "omd.view",
        "title": "%View ECL Markdown%",
        "icon": {
          "dark": "./resources/dark/omd-view.svg",
          "light": "./resources/light/omd-view.svg"
        }
      },
      {
        "command": "omd.export",
        "title": "%Export ECL Markdown to HTML%",
        "icon": {
          "dark": "./resources/dark/omd-export.svg",
          "light": "./resources/light/omd-export.svg"
        }
      },
      {
        "command": "dashy.view",
        "title": "%View Dashboard%",
        "icon": {
          "dark": "./resources/dark/dashy-view.svg",
          "light": "./resources/light/dashy-view.svg"
        }
      },
      {
        "command": "dashy.edit",
        "title": "%Edit Dashboard%",
        "icon": {
          "dark": "./resources/dark/dashy-edit.svg",
          "light": "./resources/light/dashy-edit.svg"
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.copyAsEclID",
          "group": "6_copypath@999"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.export",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.submit",
          "group": "navigation@900"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.compile",
          "group": "navigation@910"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.checkSyntax",
          "group": "navigation@920"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.insertRecordDef",
          "group": "navigation@930"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.checkSyntax",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.generate",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.export",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/title": [
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == ecl",
          "command": "ecl.submit",
          "group": "navigation@900"
        },
        {
          "when": "resourceLangId == ecl",
          "command": "ecl.compile",
          "group": "navigation@910"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.copyAsEclID",
          "group": "1_cutcopypaste@999"
        }
      ],
      "view/title": [
        {
          "command": "ecl.submit",
          "when": "editorTextFocus && editorLangId == ecl",
          "group": "navigation"
        },
        {
          "command": "hpccPlatform.myWorkunits",
          "when": "view == hpccPlatform && hpccPlatform.isMyWorkunits",
          "group": "navigation@10"
        },
        {
          "command": "hpccPlatform.allWorkunits",
          "when": "view == hpccPlatform && hpccPlatform.isAllWorkunits",
          "group": "navigation@20"
        },
        {
          "command": "hpccPlatform.refresh",
          "when": "view == hpccPlatform",
          "group": "navigation@40"
        },
        {
          "command": "hpccPlatform.eclwatch",
          "when": "view == hpccPlatform",
          "group": "navigation@50"
        },
        {
          "command": "hpccPlatform.switch",
          "when": "view == hpccPlatform",
          "group": "navigation@60"
        },
        {
          "command": "hpccResources.bundles.homepage",
          "when": "view == hpccResources.bundles",
          "group": "navigation@10"
        },
        {
          "command": "hpccResources.bundles.refresh",
          "when": "view == hpccResources.bundles",
          "group": "navigation@20"
        },
        {
          "command": "hpccResources.clientTools.homepage",
          "when": "view == hpccResources.clientTools",
          "group": "navigation@10"
        },
        {
          "command": "hpccResources.clientTools.refresh",
          "when": "view == hpccResources.clientTools",
          "group": "navigation@20"
        },
        {
          "command": "ecl.watch.lite.openECLWatchExternal",
          "when": "view == ecl.watch.lite && ecl.watch.lite.hasWuid",
          "group": "navigation@100"
        }
      ],
      "view/item/context": [
        {
          "command": "ecl.openECLWatchExternal",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "inline"
        },
        {
          "command": "hpccPlatform.abortWU",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "navigation@900"
        },
        {
          "command": "hpccPlatform.deleteWU",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "navigation@920"
        },
        {
          "command": "hpccResources.bundles.homepage",
          "when": "view == hpccResources.bundles && viewItem =~ /^BundlesItem/",
          "group": "inline"
        },
        {
          "command": "hpccResources.bundles.install",
          "when": "view == hpccResources.bundles && viewItem == BundlesItem",
          "group": "inline"
        },
        {
          "command": "hpccResources.bundles.uninstall",
          "when": "view == hpccResources.bundles && viewItem == BundlesItemInstalled",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.activate",
          "when": "view == hpccResources.clientTools && viewItem == ClientToolsItemDeactive",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.deactivate",
          "when": "view == hpccResources.clientTools && viewItem == ClientToolsItemActive",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.terminal",
          "when": "view == hpccResources.clientTools && viewItem =~ /^ClientToolsItem/",
          "group": "inline"
        },
        {
          "command": "ecl.openECLWatchExternal",
          "when": "view == hpccPlatform && viewItem == ECLResultNode",
          "group": "inline"
        }
      ]
    },
    "keybindings": [
      {
        "command": "ecl.searchTerm",
        "key": "shift+f1",
        "mac": "shift+f1",
        "when": "editorTextFocus"
      },
      {
        "command": "ecl.submit",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.checkSyntaxAll",
        "key": "shift+f7",
        "mac": "shift+f7"
      },
      {
        "command": "ecl.checkSyntaxClear",
        "key": "ctrl+f7",
        "mac": "cmd+f7"
      },
      {
        "command": "ecl.insertRecordDef",
        "key": "ctrl+i r",
        "mac": "cmd+i r",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "kel.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "kel.generate",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "omd.view",
        "key": "ctrl+shift+V",
        "mac": "cmd+shift+V",
        "when": "editorTextFocus"
      },
      {
        "command": "dashy.view",
        "key": "ctrl+shift+V",
        "mac": "cmd+shift+V",
        "when": "editorTextFocus"
      },
      {
        "command": "dashy.edit",
        "key": "ctrl+alt+shift+V",
        "mac": "cmd+alt+shift+V",
        "when": "editorTextFocus"
      }
    ],
    "views": {
      "hpccResources": [
        {
          "id": "hpccResources.bundles",
          "name": "Bundles"
        },
        {
          "id": "hpccResources.clientTools",
          "name": "Client Tools"
        }
      ],
      "explorer": [
        {
          "id": "hpccPlatform",
          "name": "HPCC Platform",
          "icon": "resources/ecl-explorer.svg",
          "contextualTitle": "HPCC Platform",
          "when": "hpccPlatformActive"
        }
      ],
      "ecl-watch-lite": [
        {
          "type": "webview",
          "id": "ecl.watch.lite",
          "name": "",
          "when": "hpccPlatformActive"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "hpccResources",
          "title": "hpcc-systems",
          "icon": "resources/ecl-explorer.svg"
        }
      ],
      "panel": [
        {
          "id": "ecl-watch-lite",
          "title": "HPCC",
          "icon": "resources/ecl-explorer.svg",
          "when": "resourceLangId == ecl"
        }
      ]
    },
    "customEditors": [],
    "breakpoints": [
      {
        "language": "ecl"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "ECL",
      "properties": {
        "ecl.eclccArgs": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%eclcc syntax check arguments%"
        },
        "ecl.eclccSyntaxArgs": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%eclcc syntax check arguments%"
        },
        "ecl.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Run 'eclcc -syntax' on save%"
        },
        "ecl.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Run 'eclcc -syntax' on load%"
        },
        "ecl.includeFolders": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%Additional folders to use when resolving IMPORT statements%"
        },
        "ecl.eclccPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Override eclcc auto detection%"
        },
        "ecl.eclccLogFile": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Write eclcc log file to specified file%"
        },
        "ecl.legacyMode": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Add '-legacy' argument to eclcc%"
        },
        "ecl.debugLogging": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "description": "%Debug level logging (requires restart)%"
        },
        "ecl.launchConfiguration": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Default launch configuration%"
        },
        "ecl.targetCluster": {
          "type": "object",
          "scope": "resource",
          "default": {},
          "description": "%Target cluster (per launch configuration)%"
        },
        "ecl.pinnedLaunchConfigurations": {
          "type": "object",
          "scope": "resource",
          "default": {},
          "description": "%Pinned launch configurations%"
        },
        "ecl.WUAutoOpen": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Automatically open Workunits on creation%"
        },
        "ecl.forceProxySupport": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Force global 'proxySupport' to 'fallback'%"
        },
        "dashy.libraryLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "latest",
            "localPath"
          ],
          "default": "latest",
          "description": "%Dashy library location (bundled, latest, localPath)%"
        },
        "dashy.localPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Dashy Library Path (libraryLocation === \"localPath\")%"
        },
        "kel.javaArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "%Java runtime arguments (e.g. -Xmx12G)%",
          "default": []
        },
        "kel.kelPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Override KEL auto detection%"
        },
        "kel.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Check syntax on save%"
        },
        "kel.generateLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "Same Folder",
            "Child Folder"
          ],
          "default": "Same Folder",
          "description": "%Generated ECL location%"
        },
        "kel.generateOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Generate ECL on save%"
        },
        "kel.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Check syntax on load%"
        },
        "kel.syntaxCheckFromGrammar": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Check syntax with KEL grammar (fast)%"
        }
      }
    },
    "debuggers": [
      {
        "type": "ecl",
        "label": "ECL",
        "program": "./dist/debugger.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "serverAddress",
              "protocol",
              "port",
              "targetCluster"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "%Server protocol (http or https)%",
                "enum": [
                  "http",
                  "https"
                ],
                "default": "http"
              },
              "serverAddress": {
                "type": "string",
                "description": "%Server IP/Domain address%",
                "default": "127.0.0.1"
              },
              "port": {
                "type": "number",
                "description": "%The WsWorkunits port%",
                "default": 8010
              },
              "targetCluster": {
                "type": "string",
                "description": "%Target cluster%",
                "default": "hthor"
              },
              "abortSubmitOnError": {
                "type": "boolean",
                "description": "%Abort submit when errors are reported during archive generation%",
                "default": true
              },
              "rejectUnauthorized": {
                "type": "boolean",
                "description": "%Reject unauthorized calls e.g. SSL certificate errors%",
                "default": true
              },
              "eclccPath": {
                "type": "string",
                "description": "%Override eclcc auto detection%"
              },
              "eclccArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "%Build flags, to be passed to the eclcc compiler%"
              },
              "eclccSyntaxArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "%Syntax check arguments, to be passed to the eclcc compiler%"
              },
              "eclccLogFile": {
                "type": "string",
                "description": "%Override eclcc auto detection%"
              },
              "resultLimit": {
                "type": "number",
                "description": "%Max result limit for workunit results%",
                "default": 100
              },
              "timeoutSecs": {
                "type": "number",
                "description": "%Default timeout (secs)%",
                "default": 60
              },
              "user": {
                "type": "string",
                "description": "%User ID%",
                "default": ""
              },
              "password": {
                "type": "string",
                "description": "%User password%",
                "default": ""
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "name": "localhost",
            "type": "ecl",
            "request": "launch",
            "protocol": "http",
            "serverAddress": "localhost",
            "port": 8010,
            "targetCluster": "hthor",
            "rejectUnauthorized": true,
            "resultLimit": 100,
            "timeoutSecs": 60,
            "user": "vscode_user",
            "password": ""
          }
        ],
        "configurationSnippets": [
          {
            "label": "ECL:  localhost (http)",
            "description": "%A new configuration to submit ECL to localhost, hthor%",
            "body": {
              "name": "localhost",
              "type": "ecl",
              "request": "launch",
              "protocol": "http",
              "serverAddress": "localhost",
              "port": 8010,
              "targetCluster": "hthor",
              "rejectUnauthorized": true,
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          },
          {
            "label": "ECL:  localhost (https)",
            "description": "%A new configuration to submit ECL to localhost, hthor%",
            "body": {
              "name": "localhost (https)",
              "type": "ecl",
              "request": "launch",
              "protocol": "https",
              "serverAddress": "localhost",
              "port": 18010,
              "targetCluster": "hthor",
              "rejectUnauthorized": false,
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          }
        ]
      }
    ]
  }
}