{
  "private": true,
  "name": "ecl",
  "version": "2.1.3",
  "publisher": "hpcc-systems",
  "displayName": "ECL Language",
  "description": "ECL (Enterprise Control Language) support for Visual Studio Code",
  "icon": "images/eclIcon.png",
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Debuggers"
  ],
  "main": "./dist/extension.js",
  "scripts": {
    "clean": "rimraf out lib* dist types *.vsix",
    "copy-resources": "copyfiles -f ./node_modules/@hpcc-js/ddl-shim/schema/v2.json ./dist",
    "gen-grammar": "wsl -e ./scripts/grammar-generate.sh",
    "compile": "tsc",
    "compile-watch": "npm run compile -- -watch",
    "compile-es6": "tsc --module es6 --outDir ./lib-es6",
    "compile-es6-watch": "npm run compile-es6 -- -w",
    "bundle": "webpack --mode production",
    "bundle-watch": "webpack --mode development --watch",
    "build": "run-s copy-resources compile-es6 bundle",
    "watch": "npm-run-all compile-es6 --parallel compile-es6-watch bundle-watch",
    "lint": "tslint --project . src/**/*.ts",
    "test": "npm run compile",
    "dev-link": "rimraf ./node_modules/@hpcc-js && mklink /J .\\node_modules\\@hpcc-js ..\\hpcc-js\\packages",
    "dev-unlink": "rimraf ./node_modules/@hpcc-js",
    "standard-version": "standard-version",
    "vscode:prepublish": "run-s clean build",
    "git-push": "git push --follow-tags upstream candidate-1.x",
    "preinstall": "npm run dev-unlink || echo \"Clean Install - ignore previous error!\"",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "vsce-publish": "vsce publish",
    "vsce-package": "vsce package",
    "tag": "run-s standard-version git-push"
  },
  "devDependencies": {
    "@hpcc-js/comms": "^2.13.9",
    "@hpcc-js/loader": "^2.15.13",
    "@hpcc-js/marshaller": "^2.23.18",
    "@hpcc-js/observable-md": "^2.2.6",
    "@hpcc-js/util": "^2.12.0",
    "@types/mocha": "^7.0.2",
    "@types/node": "^12.12.54",
    "adm-zip": "^0.4.16",
    "antlr4": "^4.8.0",
    "copyfiles": "^2.3.0",
    "diff": "^4.0.2",
    "mocha": "^7.2.0",
    "npm-run-all": "^4.1.5",
    "original-fs": "^1.1.0",
    "rimraf": "^3.0.2",
    "source-map-loader": "^0.2.4",
    "standard-version": "^9.0.0",
    "tslib": "^1.13.0",
    "tslint": "^6.1.3",
    "typescript": "^3.9.7",
    "vsce": "^1.78.0",
    "vscode": "^1.1.36",
    "vscode-debugadapter": "^1.41.1",
    "vscode-debugprotocol": "^1.41.0",
    "webpack": "^4.44.1",
    "webpack-cli": "^3.3.12"
  },
  "author": {
    "name": "HPCC SystemsÂ®"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hpcc-systems/vscode-ecl.git"
  },
  "engines": {
    "vscode": "^1.31.0"
  },
  "galleryBanner": {
    "color": "#CFB69A",
    "theme": "light"
  },
  "extensionDependencies": [
    "vscode.json"
  ],
  "activationEvents": [
    "onLanguage:ecl",
    "onLanguage:kel",
    "onLanguage:omd",
    "onLanguage:json"
  ],
  "contributes": {
    "languages": [
      {
        "id": "ecl",
        "extensions": [
          "ecl",
          "ecllib"
        ],
        "aliases": [
          "ECL",
          "ecl"
        ],
        "configuration": "./ecl.configuration.json"
      },
      {
        "id": "kel",
        "extensions": [
          "kel"
        ],
        "aliases": [
          "KEL",
          "kel"
        ],
        "configuration": "./kel.configuration.json"
      },
      {
        "id": "omd",
        "extensions": [
          "omd"
        ],
        "aliases": [
          "Observable Markdown"
        ]
      },
      {
        "id": "json",
        "extensions": [
          "dashy"
        ],
        "aliases": [
          "Dashy"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "*.dashy",
        "url": "./dist/v2.json"
      }
    ],
    "grammars": [
      {
        "language": "ecl",
        "scopeName": "source.ecl",
        "path": "./syntaxes/ecl.tmLanguage.json"
      },
      {
        "language": "kel",
        "scopeName": "source.kel",
        "path": "./syntaxes/kel.tmLanguage.json"
      },
      {
        "language": "omd",
        "scopeName": "text.html.markdown",
        "path": "./syntaxes/omd.tmLanguage"
      }
    ],
    "snippets": [
      {
        "language": "ecl",
        "path": "./snippets/ecl.json"
      }
    ],
    "commands": [
      {
        "command": "ecl.checkSyntax",
        "title": "ECL: Syntax Check",
        "description": "Save + check syntax of current file."
      },
      {
        "command": "ecl.checkSyntaxAll",
        "title": "ECL: Syntax Check all files",
        "description": "Save All + check syntax of all files."
      },
      {
        "command": "ecl.checkSyntaxClear",
        "title": "ECL: Syntax Clear",
        "description": "Clear all previously reported ECL Syntax Check results."
      },
      {
        "command": "ecl.showLanguageReference",
        "title": "ECL: Language Reference Website",
        "description": "Opens the ECL language reference website in external browser."
      },
      {
        "command": "ecl.searchTerm",
        "title": "ECL: Language Reference Lookup",
        "description": "For the currently selected text, search the online ECL language reference."
      },
      {
        "command": "ecl.openWUDetails",
        "title": "ECL: Workunit Details",
        "description": "Opens ECL Watch Workunit Details for the selected Workunit."
      },
      {
        "command": "ecl.selectCTVersion",
        "title": "ECL: Select Client Tools Version",
        "description": "Select Client Tools Version from available options."
      },
      {
        "command": "ecl.createTerminal",
        "title": "ECL: Terminal",
        "description": "Opens ECL Client Tools Terminal Session."
      },
      {
        "command": "kel.checkSyntax",
        "title": "KEL: Syntax Check",
        "description": "Save + check syntax of current file."
      },
      {
        "command": "kel.generate",
        "title": "KEL: Generate",
        "description": "Generate source from KEL file."
      },
      {
        "command": "kel.reveal",
        "title": "KEL: Reveal Generated ECL in File Explorer",
        "description": "Reveals Generated ECL in File Explorer."
      },
      {
        "command": "kel.selectCTVersion",
        "title": "KEL: Select Client Tools Version",
        "description": "Select Client Tools Version from available options."
      },
      {
        "command": "omd.view",
        "title": "View ECL Markdown",
        "icon": {
          "dark": "./images/omd-view-dark.svg",
          "light": "./images/omd-view.svg"
        }
      },
      {
        "command": "omd.export",
        "title": "Export ECL Markdown to HTML",
        "icon": {
          "dark": "./images/omd-export-dark.svg",
          "light": "./images/omd-export.svg"
        }
      },
      {
        "command": "dashy.view",
        "title": "View Dashboard",
        "icon": {
          "dark": "./images/dashy-view-dark.svg",
          "light": "./images/dashy-view.svg"
        }
      },
      {
        "command": "dashy.edit",
        "title": "Edit Dashboard",
        "icon": {
          "dark": "./images/dashy-edit-dark.svg",
          "light": "./images/dashy-edit.svg"
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.export",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.checkSyntax",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.checkSyntax",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.generate",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.export",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/title": [
        {
          "when": "resourceLangId == omd && resourceExtname == .omd",
          "command": "omd.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ]
    },
    "keybindings": [
      {
        "command": "ecl.searchTerm",
        "key": "shift+f1",
        "mac": "shift+f1",
        "when": "editorTextFocus"
      },
      {
        "command": "ecl.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.checkSyntaxAll",
        "key": "shift+f7",
        "mac": "shift+f7"
      },
      {
        "command": "ecl.checkSyntaxClear",
        "key": "ctrl+f7",
        "mac": "ctrl+f7"
      },
      {
        "command": "kel.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "kel.generate",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "omd.view",
        "key": "ctrl+shift+V",
        "mac": "ctrl+shift+V",
        "when": "editorTextFocus"
      },
      {
        "command": "dashy.view",
        "key": "ctrl+shift+V",
        "mac": "ctrl+shift+V",
        "when": "editorTextFocus"
      },
      {
        "command": "dashy.edit",
        "key": "ctrl+alt+shift+V",
        "mac": "ctrl+alt+shift+V",
        "when": "editorTextFocus"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ecl-explorer",
          "title": "hpcc-systems",
          "icon": "images/ecl-explorer.svg"
        }
      ]
    },
    "views": {
      "ecl-explorer": [
        {
          "id": "eclWatch",
          "name": "ECL Watch"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "ecl"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "ECL",
      "properties": {
        "ecl.syntaxArgs": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [
            "-syntax"
          ],
          "description": "eclcc syntax check arguments."
        },
        "ecl.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Run 'eclcc -syntax' on save."
        },
        "ecl.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Run 'eclcc -syntax' on load."
        },
        "ecl.includeFolders": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional folders to use when resolving IMPORT statements."
        },
        "ecl.eclccPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "Override eclcc auto detection."
        },
        "ecl.legacyMode": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "Add '-legacy' argument to eclcc."
        },
        "ecl.WUOpenExternal": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Open Workunits in external browser."
        },
        "ecl.WUAutoOpen": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "Automatically open Workunits on creation."
        },
        "ecl.debugLogging": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "description": "Debug level logging (requires restart)."
        },
        "dashy.libraryLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "latest",
            "localPath"
          ],
          "default": "latest",
          "description": "Dashy library location (bundled, latest, localPath)"
        },
        "dashy.localPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "Dashy Library Path (libraryLocation === \"localPath\")"
        },
        "kel.javaArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Java runtime arguments (e.g. -Xmx12G).",
          "default": []
        },
        "kel.kelPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "Override KEL auto detection."
        },
        "kel.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "Check syntax on save."
        },
        "kel.generateLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "Same Folder",
            "Child Folder"
          ],
          "default": "Same Folder",
          "description": "Generated ECL location."
        },
        "kel.generateOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "Generate ECL on save."
        },
        "kel.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "Check syntax on load."
        }
      }
    },
    "debuggers": [
      {
        "type": "ecl",
        "label": "ECL",
        "program": "./dist/debugger.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "workspace",
              "serverAddress",
              "protocol",
              "port",
              "targetCluster"
            ],
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "submit",
                  "compile",
                  "publish",
                  "debug"
                ],
                "default": "submit"
              },
              "workspace": {
                "type": "string",
                "description": "Workspace relative path to the program folder (or any file within that folder) when in 'debug' or 'test' mode, and to the pre-built binary file to debug in 'exec' mode.",
                "default": "${workspaceRoot}"
              },
              "program": {
                "default": "${file}"
              },
              "serverAddress": {
                "type": "string",
                "description": "Server IP/Domain address.",
                "default": "127.0.0.1"
              },
              "protocol": {
                "type": "string",
                "description": "Server protocol (http or https).",
                "enum": [
                  "http",
                  "https"
                ],
                "default": "http"
              },
              "port": {
                "type": "number",
                "description": "The WsWorkunits port.",
                "default": 8010
              },
              "abortSubmitOnError": {
                "type": "boolean",
                "description": "Abort submit when errors are reported during archive generation.",
                "default": true
              },
              "rejectUnauthorized": {
                "type": "boolean",
                "description": "Reject unauthorized calls e.g. SSL certificate errors.",
                "default": false
              },
              "targetCluster": {
                "type": "string",
                "description": "Target cluster.",
                "default": "hthor"
              },
              "eclccPath": {
                "type": "string",
                "description": "Override eclcc auto detection",
                "default": "${config:ecl.eclccPath}"
              },
              "eclccArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Build flags, to be passed to the eclcc compiler.",
                "default": []
              },
              "includeFolders": {
                "type": "string",
                "description": "External folders used by IMPORT",
                "default": "${config:ecl.includeFolders}"
              },
              "legacyMode": {
                "type": "string",
                "description": "Legacy Mode.",
                "default": "${config:ecl.legacyMode}"
              },
              "resultLimit": {
                "type": "number",
                "description": "Max result limit for workunit results",
                "default": 100
              },
              "timeoutSecs": {
                "type": "number",
                "description": "Default timeout (secs)",
                "default": 60
              },
              "user": {
                "type": "string",
                "description": "User ID",
                "default": ""
              },
              "password": {
                "type": "string",
                "description": "User password",
                "default": ""
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "name": "play-hthor-submit",
            "type": "ecl",
            "request": "launch",
            "mode": "submit",
            "workspace": "${workspaceRoot}",
            "program": "${file}",
            "protocol": "https",
            "serverAddress": "play.hpccsystems.com",
            "port": 18010,
            "rejectUnauthorized": false,
            "targetCluster": "hthor",
            "eclccPath": "${config:ecl.eclccPath}",
            "eclccArgs": [],
            "includeFolders": "${config:ecl.includeFolders}",
            "legacyMode": "${config:ecl.legacyMode}",
            "resultLimit": 100,
            "timeoutSecs": 60,
            "user": "vscode_user",
            "password": ""
          }
        ],
        "configurationSnippets": [
          {
            "label": "ECL:  localhost-hthor",
            "description": "A new configuration to submit ECL to localhost, hthor.",
            "body": {
              "name": "localhost-hthor-submit",
              "type": "ecl",
              "request": "launch",
              "mode": "submit",
              "workspace": "^\"\\${workspaceRoot}\"",
              "program": "^\"\\${file}\"",
              "protocol": "http",
              "serverAddress": "localhost",
              "port": 8010,
              "rejectUnauthorized": false,
              "targetCluster": "hthor",
              "eclccPath": "^\"\\${config:ecl.eclccPath}\"",
              "eclccArgs": [],
              "includeFolders": "^\"\\${config:ecl.includeFolders}\"",
              "legacyMode": "^\"\\${config:ecl.legacyMode}\"",
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          },
          {
            "label": "ECL:  play.hpccsystems.com - hthor",
            "description": "Submits ECL to public demo servers, hthor.",
            "body": {
              "name": "play-hthor-submit",
              "type": "ecl",
              "request": "launch",
              "mode": "submit",
              "workspace": "^\"\\${workspaceRoot}\"",
              "program": "^\"\\${file}\"",
              "protocol": "https",
              "serverAddress": "play.hpccsystems.com",
              "port": 18010,
              "rejectUnauthorized": false,
              "targetCluster": "hthor",
              "eclccPath": "^\"\\${config:ecl.eclccPath}\"",
              "eclccArgs": [],
              "includeFolders": "^\"\\${config:ecl.includeFolders}\"",
              "legacyMode": "^\"\\${config:ecl.legacyMode}\"",
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          }
        ]
      }
    ]
  }
}
